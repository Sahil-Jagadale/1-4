#ASSIGNMENT 1B
#!/bin/bash
while true; do
echo "1.CREATE DATABASE"
echo "2.INSERT"
echo "3.SEARCH"
echo "4.DISPLAY"
echo "5.DELETE"
echo "6.UPDATE"
echo "7.EXIT"
echo "Enter your choice:"
read d
case $d in
1)
echo "Enter the name of the database:"
read db
if [ -f "$db" ]; then #-f:- wheteher the file exists
echo "$db exists"
else
touch $db
echo "File created successfully!:"
fi
;;
2)
echo "Enter the name of the database in which you have to insert:"
read db
echo "Enter the student id:"
read sd
echo "Enter the student name:"
read na
echo "Enter the student department:"
read dp
while true; do
echo "Enter the student phone number:"
read ph
if [[ ! "$ph" =~ ^[0-9]{10}$ ]]; then
echo "Invalid phone number. Please enter 10 digits."
else
break
fi
done
echo "Enter the student email address:"
read em
record="$sd $na $dp $ph $em"
echo $record >> $db
echo "Data Inserted!"
;;
3)
echo "Enter the name of the database in which you want to search:"
read db
echo "Enter the student id to search:"
read search_id
if [ -f "$db" ]; then #-f:- wheteher the file exists
data=$(grep "^$search_id " $db)
if [ -z "$data" ]; then #-z:- checks whether the string is empty
echo "Record not found."
else
echo "Record found:"
echo "Student ID | Name | Department | Phone | Email"
echo "$data"
fi
else
echo "$db does not exist."
fi
;;
4)
echo "Enter the name of the database to display:"
read db
if [ -f "$db" ]; then #-f:- wheteher the file exists
cat $db
else
echo "$db does not exist."
fi
;;
5)
echo "Enter the name of the database from which you want to delete a record:"
read db
echo "Enter the student id to delete:"
read delete_id
if [ -f "$db" ]; then #-f:- wheteher the file exists
if grep -q "^$delete_id " "$db"; then #-q:- it is quit mode or silent mode, it does
not return any output so here it only check it exists or not
grep -v "^$delete_id " "$db" > temp_db && mv temp_db "$db" #invert
match, except that lines it select other lines
echo "Record with Student ID $delete_id has been deleted."
else
echo "Record not found."
fi
else
echo "$db does not exist."
fi
;;
6)
echo "Enter the name of the database in which you want to update a record:"
read db
echo "Enter the student id to update:"
read update_id
if [ -f "$db" ]; then #-f:- wheteher the file exists
if grep -q "^$update_id " "$db"; then #-
echo -e "Record found. Enter the field you want to
update:\nName\nDepartment\nPhone\nEmail\n"
read field
case "$field" in
name)
echo "Enter the new student name:"
read na
sed -i "s/^$update_id [^ ]*/$update_id $na/" "$db" #-i:- make changes in the file
directly
echo "Student name has been updated."
;;
department)
echo "Enter the new student department:"
read dp
sed -i "s/^$update_id [^ ]* [^ ]*/$update_id $dp/" "$db" #-i:- make changes in the file
directly
echo "Student department has been updated."
;;
phone)
while true; do
echo "Enter the new student phone number:"
read ph
if [[ ! "$ph" =~ ^[0-9]{10}$ ]]; then
echo "Invalid phone number. Please enter 10 digits."
else
sed -i "s/^$update_id [^ ]* [^ ]* [^ ]*/$update_id $ph/" "$db" #-i:- make
changes in the file directly
echo "Student phone number has been updated."
break
fi
done
;;
email)
echo "Enter the new student email address:"
read em
sed -i "s/^$update_id [^ ]* [^ ]* [^ ]* [^ ]*/$update_id $em/" "$db" #-i:- make
changes in the file directly
echo "Student email address has been updated."
;;
*)
echo "Invalid field. No updates performed."
;;
esac
else
echo "Record not found."
fi
else
echo "$db does not exist."
fi
;;
7)
echo "Exiting..."
exit 0
;;
esac
done



#Assignment 2a

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
// Bubble Sort
void bubbleSort(int arr[], int n) {
int temp, i, j;
for (i = 0; i < n - 1; i++) {
for (j = 0; j < n - i - 1; j++) {
if (arr[j] > arr[j + 1]) {
temp = arr[j];
arr[j] = arr[j + 1];
arr[j + 1] = temp;
}
}
}
}
// Merge Sort
void merge(int arr[], int l, int m, int r) {
int i, j, k;
int n1 = m - l + 1;
int n2 = r - m;
int L[n1], R[n2];
for (i = 0; i < n1; i++)
L[i] = arr[l + i];
for (j = 0; j < n2; j++)
R[j] = arr[m + 1 + j];
i = 0;
j = 0;
k = l;
while (i < n1 && j < n2) {
if (L[i] <= R[j]) {
arr[k] = L[i];
i++;
}
else {
arr[k] = R[j];
j++;
}
k++;
}
while (i < n1) {
arr[k] = L[i];
i++;
k++;
}
while (j < n2) {
arr[k] = R[j];
j++;
k++;
}
}
void mergeSort(int arr[], int l, int r) {
if (l < r) {
int m = l + (r - l) / 2;
mergeSort(arr, l, m);
mergeSort(arr, m + 1, r);
merge(arr, l, m, r);
}
}
int main() {
int n, i;
printf("Enter the number of integers to sort: ");
scanf("%d", &n);
int arr[n];
printf("Enter %d integers:\n", n);
for (i = 0; i < n; i++) {
scanf("%d", &arr[i]);
}
int choice;
printf("\nEnter your choice:\n");
printf("1. Fork, Wait, and Merge/Bubble Sort\n");
printf("2. Orphan Process\n");
printf("3. Zombie Process\n");
scanf("%d", &choice);
switch (choice) {
case 1: {
pid_t pid = fork();
if (pid < 0) {
printf("Fork failed.\n");
exit(1);
} else if (pid == 0) {
printf("\nChild process (Bubble Sort) started.\n");
bubbleSort(arr, n);
printf("\nSorted array by the child process (Bubble Sort):\n");
for (i = 0; i < n; i++)
printf("%d ", arr[i]);
printf("\n");
} else {
printf("\nParent process (Merge Sort) started.\n");
mergeSort(arr, 0, n - 1);
printf("\nSorted array by the parent process (Merge Sort):\n");
for (i = 0; i < n; i++)
printf("%d ", arr[i]);
printf("\n");
wait(NULL);
printf("\nChild process has completed.\n");
}
break;
}
case 2: {
pid_t pid = fork();
if (pid < 0) {
printf("Fork failed.\n");
exit(1);
} else if (pid == 0) {
// Orphan process
printf("\nOrphan process started (PID: %d).\n", getpid());
printf("Parent process (PID: %d) terminated before the child process.\n",
getppid());
// Sleep to create an orphan process
sleep(10);
printf("Orphan process (PID: %d) completed.\n", getpid());
} else {
// Parent process
printf("\nParent process (PID: %d) started.\n", getppid());
sleep(5);
system("ps -elf | grep -e 'PPID\\|CHILD'");
printf("Parent process (PID: %d) completed.\n", getppid());
}
break;
}
case 3: {
pid_t pid = fork();
if (pid < 0) {
printf("Fork failed.\n");
exit(1);
} else if (pid == 0) {
// Child process
printf("\nChild process (Zombie) started.\n");
printf("Child process (PID: %d) completed.\n", getpid());
} else {
// Parent process
sleep(10);
char command[100];
sprintf(command,"ps -elf | grep %d",getpid());
system(command);
printf("\nParent process (Zombie) started.\n");
printf("Parent process will sleep to create a Zombie (PID: %d).\n", pid);
printf("Parent process (PID: %d) completed.\n", getppid());
wait(NULL);
}
break;
}
default:
printf("Invalid choice.\n");
break;
}
return 0;
}


#Assignmnet 2b:-

/Main Process
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
void sortArray(int arr[], int n) {
for (int i = 0; i < n - 1; i++) {
for (int j = 0; j < n - i - 1; j++) {
if (arr[j] > arr[j + 1]) {
int temp = arr[j];
arr[j] = arr[j + 1];
arr[j + 1] = temp;
}
}
}
}
int main() {
int n;
printf("Enter the size of array: ");
scanf("%d",&n);
int arr[n];
printf("Enter the elements of the array: ");
for(int i=0;i<n;i++){
scanf("%d",&arr[i]);
}
pid_t pid = fork();
if (pid < 0) {
fprintf(stderr, "Fork failed\n");
return 1;
} else if (pid == 0) {
// Child process
printf("Main process start: (pid) %d\n",getpid());
sortArray(arr, n);
printf("Sorted array: ");
for (int i = 0; i < n; i++) {
printf("%d ", arr[i]);
}
printf("\n");
char *args[n + 2];
args[0] = "./cp";
for (int i = 0; i < n; i++) {
char buffer[10];
snprintf(buffer, sizeof(buffer), "%d", arr[i]); // converts int to string format and
pass them into the buffer
args[i + 1] = strdup(buffer); //strdup:- (string duplicate) create a new copy of the
string
}
args[n + 1] = NULL; // indicate the end of the list of command-line arguments.
execve(args[0], args, NULL);
perror("execve");
printf("Main process end: (pid) %d\n",getpid());
return 1;
} else {
// Parent process
wait(NULL);
printf("Parent process finished.\n");
}
return 0;
}
//CHILD PROCESS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
int main(int argc, char *argv[]) {
pid_t pid = fork();
printf("Child process start: (pid) %d\n",getpid());
printf("Array in reverse order: ");
for (int i = argc - 1; i > 0; i--) {
printf("%s ", argv[i]);
}
printf("\n");
printf("Child process start: (pid) %d\n",getpid());
return 0;
}

#ASSIGNMNET 4:-

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#define BUFFER_SIZE 5
int buffer[BUFFER_SIZE];
sem_t empty, full;
pthread_mutex_t mutex;
int in = 0, out = 0;
void print_buffer() {
printf("Buffer: [");
for (int i = 0; i < BUFFER_SIZE; i++) {
printf("%d", buffer[i]);
if (i < BUFFER_SIZE - 1) {
printf(", ");
}
}
printf("]\n");
}
void *producer(void *arg) {
int item;
while(1){
item = rand() % 100;
sem_wait(&empty);
pthread_mutex_lock(&mutex);
buffer[in] = item;
printf("Prodcer %d Produced: %d\n",in, item);
in = (in + 1) % BUFFER_SIZE;
pthread_mutex_unlock(&mutex);
sem_post(&full);
print_buffer();
sleep(2);
}
pthread_exit(NULL);
}
void *consumer(void *arg) {
int item;
while(1) {
sem_wait(&full);
pthread_mutex_lock(&mutex);
item = buffer[out];
printf("Consumer %d Consumed: %d\n",out,item);
out = (out + 1) % BUFFER_SIZE;
pthread_mutex_unlock(&mutex);
sem_post(&empty);
print_buffer();
sleep(5);
}
pthread_exit(NULL);
}
int main() {
pthread_t producer_thread, consumer_thread;
sem_init(&empty, 0, BUFFER_SIZE);
sem_init(&full, 0, 0);
pthread_mutex_init(&mutex, NULL);
pthread_create(&producer_thread, NULL, producer, NULL);
pthread_create(&consumer_thread, NULL, consumer, NULL);
pthread_join(producer_thread, NULL);
pthread_join(consumer_thread, NULL);
sem_destroy(&empty);
sem_destroy(&full);
pthread_mutex_destroy(&mutex);
return 0;
}


#ASSIGNMNET 3:-
#include <stdio.h>
#include <limits.h>

struct Process {
    int pid;
    int burst_time;
    int remaining_time;
    int arrival_time;
};

void swap(struct Process *xp, struct Process *yp) {
    struct Process temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sortProcessesByArrivalTime(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

void printGanttChart(struct Process processes[], int n, int completion_time[]) {
    int total_time = completion_time[n - 1];
    int chart[total_time];
    int current_time = 0;

    for (int i = 0; i < total_time; i++) {
        chart[i] = -1; // Initialize the chart with -1 to represent idle time
    }

    for (int i = 0; i < n; i++) {
        int start_time = completion_time[i] - processes[i].burst_time;
        for (int j = start_time; j < completion_time[i]; j++) {
            chart[j] = processes[i].pid;
        }
    }

    printf("Gantt Chart:\n");
    for (int i = 0; i < total_time; i++) {
        if (i == 0 || chart[i] != chart[i - 1]) {
            if (i != 0) {
                printf("] ");
            }
            printf("| P%d [", chart[i]);
        }
    }
    printf("] |\n");
}

void SJFNonPreemptive(struct Process processes[], int n) {
    sortProcessesByArrivalTime(processes, n);

    int completion_time[n];
    int turnaround_time[n];
    int waiting_time[n];

    float total_waiting_time = 0;
    float total_turnaround_time = 0;

    int current_time = processes[0].arrival_time;
    completion_time[0] = current_time + processes[0].burst_time;
    turnaround_time[0] = completion_time[0] - processes[0].arrival_time;
    waiting_time[0] = 0;

    for (int i = 1; i < n; i++) {
        current_time = completion_time[i - 1];
        completion_time[i] = current_time + processes[i].burst_time;
        turnaround_time[i] = completion_time[i] - processes[i].arrival_time;
        waiting_time[i] = turnaround_time[i] - processes[i].burst_time;

        total_waiting_time += waiting_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    printf("\nNon-Preemptive Shortest Job First Scheduling:\n");
    printf("PID\tBurst Time\tArrival Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].burst_time,
               processes[i].arrival_time, completion_time[i], turnaround_time[i], waiting_time[i]);
    }

    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);

    printGanttChart(processes, n, completion_time);
}

void SJFPreemptive(struct Process processes[], int n) {
    sortProcessesByArrivalTime(processes, n);

    int remaining_processes = n;
    int current_time = 0;
    int prev_process = -1; // To track the previously executed process
    int idle_count = 0;    // Counter for consecutive "Idle" outputs

    printf("\nPreemptive Shortest Job First Scheduling:\nGantt Chart:\n");

    while (remaining_processes > 0) {
        int min_burst_index = -1;
        int min_burst_time = INT_MAX; // Set to a large value initially

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                if (processes[i].remaining_time < min_burst_time) {
                    min_burst_time = processes[i].remaining_time;
                    min_burst_index = i;
                }
            }
        }

        if (min_burst_index == -1) {
            printf("| Idle ");
            idle_count++;

            if (idle_count >= 5) {
                break; // Break the loop if 5 consecutive "Idle" outputs are reached
            }
            current_time++;
        } else {
            idle_count = 0; // Reset idle_count when a non-idle process is executed

            if (prev_process != min_burst_index) {
                printf("| P%d ", processes[min_burst_index].pid);
                prev_process = min_burst_index;
            }
            processes[min_burst_index].remaining_time--;
            current_time++;

            if (processes[min_burst_index].remaining_time == 0) {
                processes[min_burst_index].remaining_time = -1;
                remaining_processes--;
                prev_process = -1; // Reset prev_process for the next iteration
            }
        }
    }

    printf("|\n");

    SJFNonPreemptive(processes, n);
}

void SRTF(struct Process processes[], int n) {
    sortProcessesByArrivalTime(processes, n);

    int remaining_processes = n;
    int current_time = 0;
    int prev_process = -1; // To track the previously executed process
    int idle_count = 0;    // Counter for consecutive "Idle" outputs

    printf("\nShortest Remaining Time First Scheduling:\nGantt Chart:\n");

    while (remaining_processes > 0) {
        int min_burst_index = -1;
        int min_burst_time = INT_MAX; // Set to a large value initially

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                if (processes[i].remaining_time < min_burst_time) {
                    min_burst_time = processes[i].remaining_time;
                    min_burst_index = i;
                }
            }
        }

        if (min_burst_index == -1) {
            printf("| Idle ");
            idle_count++;

            if (idle_count >= 5) {
                break; // Break the loop if 5 consecutive "Idle" outputs are reached
            }
            current_time++;
        } else {
            idle_count = 0; // Reset idle_count when a non-idle process is executed

            printf("| P%d ", processes[min_burst_index].pid);
            processes[min_burst_index].remaining_time--;
            current_time++;

            if (processes[min_burst_index].remaining_time == 0) {
                remaining_processes--;
            }
        }
    }

    printf("|\n");

    SJFNonPreemptive(processes, n);
}

void roundRobin(struct Process processes[], int n, int time_quantum) {
    int completion_time[n];
    int turnaround_time[n];
    int waiting_time[n];
    int remaining_processes = n;
    int current_time = 0;

    for (int i = 0; i < n; i++) {
        processes[i].remaining_time = processes[i].burst_time;
    }

    printf("\nRound Robin Scheduling (Time Quantum: %d):\nGantt Chart:\n", time_quantum);
    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                int execution_time = (processes[i].remaining_time <= time_quantum) ? processes[i].remaining_time : time_quantum;
                current_time += execution_time;
                processes[i].remaining_time -= execution_time;

                printf("| P%d ", processes[i].pid);

                if (processes[i].remaining_time == 0) {
                    completion_time[i] = current_time;
                    remaining_processes--;
                }
            }
        }
    }

    printf("|\n");

    for (int i = 0; i < n; i++) {
        turnaround_time[i] = completion_time[i] - processes[i].arrival_time;
        waiting_time[i] = turnaround_time[i] - processes[i].burst_time;

        printf("Process %d:\n", processes[i].pid);
        printf("Completion Time: %d\n", completion_time[i]);
        printf("Turnaround Time: %d\n", turnaround_time[i]);
        printf("Waiting Time: %d\n\n", waiting_time[i]);
    }
}

int main() {
    int choice, n, time_quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    do {
        printf("\nMenu:\n");
        printf("1. Shortest Job First (Non-Preemptive)\n");
        printf("2. Shortest Job First (Preemptive)\n");
        printf("3. Shortest Remaining Time First\n");
        printf("4. Round Robin\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                SJFNonPreemptive(processes, n);
                break;
            case 2:
                SJFPreemptive(processes, n);
                break;
            case 3:
                SRTF(processes, n);
                break;
            case 4:
                printf("Enter time quantum for Round Robin: ");
                scanf("%d", &time_quantum);
                roundRobin(processes, n, time_quantum);
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 5);

    return 0;
}





